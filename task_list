(*future)
  * a mutex will have lock compatibility matirx as below (if implemented using glock)
           LOCK
    LOCK   0
  * a rwlock's lock compatibility matrix, in terms of glock could possibly look like this
           Read  Write
    Read   1     0
    Write  0     0
  * a template initialization of this lock_compatibility matrix should look like this
  lock_compatibility_matrix m = {
    3,
    (uint8_t[ (3 * (3+1)) / 2 ]){
          0,
          1,2,
          3,4,5
    },
  };
  * In readme add the following:
   * WHEN A rwlock CAN BE IMPLEMENTED USING THE glock, THEN WHY IS THERE A SEPARATE IMPLEMENTATION FOR A rwlock?
   * Why rwlock WILL NEVER BE IMPLEMENTED AS A GENERALIZED CASE OF glock?
     * glock will not have separate condition variable for all locking modes, so can not prevent thread thrashing
     * glock will not have read/write preferring options
     * glock_transition_lock_mode may allow upgrade/downgrade, but does not protect against deadlock caused by 2 concurrent readers trying to upgrade the same reader lock, while rwlock gracefully fails such a case by only allowing exactly 1 thread to wait for upgrading the reader lock
     * glock needs to allocate and intialize a dynamic array for counts of locks issued per lock mode, and so it's initialization could fail, unlike rwlock
  * update this project in resume